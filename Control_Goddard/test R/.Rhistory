setwd("~/Desktop/test R")
require(reticulate)
require(SPOT)
#virtualenv_create("r-reticulate")
#use_virtualenv("r-reticulate")
use_python("/usr/bin/python3")
scipy <- import("scipy")
deap <- import("deap")
timeit <- import("timeit")
numpy <- import("numpy")
operator <- import("operator")
random <- import("random")
functools <- import("functools")
datetime <- import("datetime")
source_python("GP_Goddard_forR.py")
library(SPOT)
spotData <- NULL
lower = c(50,  30,  1,   1.2,   0.1,  0.2, 2,   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
upper = c(300, 200, 1.2, 1.8,   0.94, 0.8, 50,  2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
objFun <- function(x){
interm<-function(x){
if(sum(x[9:19])<3)
return(1e10)
if(x[1]<=x[7])
x[7]=x[1]
x = c(x[1:4] , 1-x[4]-0.05,x[5:25])
#test(x)
GP_param_tuning(x)
}
y=rep(NA,nrow(x))
for ( i in 1: nrow(x)){
# print(i)
y[i]=interm(x[i,,drop=FALSE])
}
# as.matrix( apply(x, 1, interm))
y
}
#objFun(matrix(lower,1))
#   objFun <- SPOT::funSphere
types= c(rep("numeric",8),rep("factor",(length(upper)-8)))
des = designLHD(,lower,upper, control = list(size= 1000,types=types) )
res = objFun(des)
source_python("GP_Goddard_forR.py")
library(SPOT)
spotData <- NULL
lower = c(50,  30,  1,   1.2,   0.1,  0.2, 2,   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
upper = c(300, 200, 1.2, 1.8,   0.94, 0.8, 50,  2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
objFun <- function(x){
interm<-function(x){
if(sum(x[9:19])<3)
return(1e10)
if(x[1]<=x[7])
x[7]=x[1]
x = c(x[1:4] , 1-x[4]-0.05,x[5:25])
#test(x)
GP_param_tuning(x)
}
y=rep(NA,nrow(x))
for ( i in 1: nrow(x)){
# print(i)
y[i]=interm(x[i,,drop=FALSE])
}
# as.matrix( apply(x, 1, interm))
y
}
#objFun(matrix(lower,1))
#   objFun <- SPOT::funSphere
types= c(rep("numeric",8),rep("factor",(length(upper)-8)))
des = designLHD(,lower,upper, control = list(size= 1000,types=types) )
res = objFun(des)
require(reticulate)
require(SPOT)
#virtualenv_create("r-reticulate")
#use_virtualenv("r-reticulate")
use_python("/usr/bin/python3")
scipy <- import("scipy")
deap <- import("deap")
timeit <- import("timeit")
numpy <- import("numpy")
operator <- import("operator")
random <- import("random")
functools <- import("functools")
datetime <- import("datetime")
source_python("GP_Goddard_forR.py")
library(SPOT)
spotData <- NULL
lower = c(50,  30,  1,   1.2,   0.1,  0.2, 2,   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
upper = c(300, 200, 1.2, 1.8,   0.94, 0.8, 50,  2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
objFun <- function(x){
interm<-function(x){
if(sum(x[9:19])<3)
return(1e10)
if(x[1]<=x[7])
x[7]=x[1]
x = c(x[1:4] , 1-x[4]-0.05,x[5:25])
#test(x)
GP_param_tuning(x)
}
y=rep(NA,nrow(x))
for ( i in 1: nrow(x)){
# print(i)
y[i]=interm(x[i,,drop=FALSE])
}
# as.matrix( apply(x, 1, interm))
y
}
#objFun(matrix(lower,1))
#   objFun <- SPOT::funSphere
types= c(rep("numeric",8),rep("factor",(length(upper)-8)))
des = designLHD(,lower,upper, control = list(size= 1000,types=types) )
res = objFun(des)
source_python("GP_Goddard_forR.py")
library(SPOT)
spotData <- NULL
lower = c(50,  30,  1,   1.2,   0.1,  0.2, 2,   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
upper = c(300, 200, 1.2, 1.8,   0.94, 0.8, 50,  2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
objFun <- function(x){
interm<-function(x){
if(sum(x[9:19])<3)
return(1e10)
if(x[1]<=x[7])
x[7]=x[1]
x = c(x[1:4] , 1-x[4]-0.05,x[5:25])
#test(x)
GP_param_tuning(x)
}
y=rep(NA,nrow(x))
for ( i in 1: nrow(x)){
# print(i)
y[i]=interm(x[i,,drop=FALSE])
}
# as.matrix( apply(x, 1, interm))
y
}
#objFun(matrix(lower,1))
#   objFun <- SPOT::funSphere
types= c(rep("numeric",8),rep("factor",(length(upper)-8)))
des = designLHD(,lower,upper, control = list(size= 1000,types=types) )
res = objFun(des)
source_python("GP_Goddard_forR.py")
library(SPOT)
spotData <- NULL
lower = c(50,  30,  1,   1.2,   0.1,  0.2, 2,   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
upper = c(300, 200, 1.2, 1.8,   0.94, 0.8, 50,  2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
objFun <- function(x){
interm<-function(x){
if(sum(x[9:19])<3)
return(1e10)
if(x[1]<=x[7])
x[7]=x[1]
x = c(x[1:4] , 1-x[4]-0.05,x[5:25])
#test(x)
GP_param_tuning(x)
}
y=rep(NA,nrow(x))
for ( i in 1: nrow(x)){
# print(i)
y[i]=interm(x[i,,drop=FALSE])
}
# as.matrix( apply(x, 1, interm))
y
}
#objFun(matrix(lower,1))
#   objFun <- SPOT::funSphere
types= c(rep("numeric",8),rep("factor",(length(upper)-8)))
des = designLHD(,lower,upper, control = list(size= 1000,types=types) )
res = objFun(des)
source_python("GP_Goddard_forR.py")
library(SPOT)
spotData <- NULL
lower = c(50,  30,  1,   1.2,   0.1,  0.2, 2,   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
upper = c(300, 200, 1.2, 1.8,   0.94, 0.8, 50,  2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
objFun <- function(x){
interm<-function(x){
if(sum(x[9:19])<3)
return(1e10)
if(x[1]<=x[7])
x[7]=x[1]
x = c(x[1:4] , 1-x[4]-0.05,x[5:25])
#test(x)
GP_param_tuning(x)
}
y=rep(NA,nrow(x))
for ( i in 1: nrow(x)){
# print(i)
y[i]=interm(x[i,,drop=FALSE])
}
# as.matrix( apply(x, 1, interm))
y
}
#objFun(matrix(lower,1))
#   objFun <- SPOT::funSphere
types= c(rep("numeric",8),rep("factor",(length(upper)-8)))
des = designLHD(,lower,upper, control = list(size= 1000,types=types) )
res = objFun(des)
