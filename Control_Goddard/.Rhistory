library(SPOT)
spotData <- NULL
lower = c(10, 10, 1, 1.5, 0.2, 0.2, 0.2, 2, 1.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
upper = c(300, 300, 1.5, 2, 1.0, 1.0, 0.8, 10 ,2  , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
objFun <- function(x){
as.matrix( apply(x, 1, GP_Goddard_forR))
}
objFun <- SPOT::funSphere
types= c(rep("numeric",9),"integer",rep("factor",(length(upper)-10)))
#SPOT Call
spotData <- spot(
fun = objFun, lower = lower,
upper = upper,
control = list(model = buildKriging,
modelControl = list(thetaLower = 1e-04,
thetaUpper = 100,
algTheta = optimDE,
budgetAlgTheta = 50,
optimizeP = TRUE,
useLambda = TRUE,
lambdaLower = -6,
lambdaUpper = 0,
startTheta = NULL,
reinterpolate = FALSE,
types = types),
optimizer = optimDE,
optimizerControl = list(funEvals = 200,
populationSize = 260,
types = types),
design = designLHD,
designControl = list(size = 20,
retries = 1,
inequalityConstraint = NULL,
replicates = 1,
types = types),
funEvals = 23,
noise = FALSE,
OCBA = FALSE,
OCBAbudget = 0,
replicates = 1,
seedFun = NA,
seedSPOT = 1,
plots = FALSE,
types = types))
#SPOT Call
spotData <- spot(
fun = objFun, lower = lower,
upper = upper,
control = list(model = buildKriging,
modelControl = list(thetaLower = 1e-04,
thetaUpper = 100,
algTheta = optimDE,
budgetAlgTheta = 50,
optimizeP = TRUE,
useLambda = TRUE,
lambdaLower = -6,
lambdaUpper = 0,
startTheta = NULL,
reinterpolate = FALSE,
types = types),
optimizer = optimDE,
optimizerControl = list(funEvals = 200,
populationSize = 260,
types = types),
design = designLHD,
designControl = list(size = 20,
retries = 1,
inequalityConstraint = NULL,
replicates = 1,
types = types),
funEvals = 23,
noise = FALSE,
OCBA = FALSE,
OCBAbudget = 0,
replicates = 1,
seedFun = NA,
seedSPOT = 1,
plots = TRUE,
types = types))
require(reticulate)
setwd("~/Desktop/Git_workspace/Personal/Control_Goddard")
#require(SPOT)
# virtualenv_create("r-reticulate")
use_virtualenv("r-reticulate")
use_python("/usr/local/Cellar/python/3.7.4/Frameworks/Python.framework/Versions/3.7/bin/python3.7")
scipy <- import("scipy")
deap <- import("deap")
source_python("GP_Goddard_forR.py")
library(SPOT)
spotData <- NULL
lower = c(10, 10, 1, 1.5, 0.2, 0.2, 0.2, 2, 1.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
upper = c(300, 300, 1.5, 2, 1.0, 1.0, 0.8, 10 ,2  , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
objFun <- function(x){
as.matrix( apply(x, 1, GP_Goddard_forR))
}
GP_Goddard_forR(lower)
source_python("GP_Goddard_forR.py")
GP_param_tuning(lower)
source_python("GP_Goddard_forR.py")
GP_param_tuning(lower)
source_python("GP_Goddard_forR.py")
GP_param_tuning(lower)
source_python("GP_Goddard_forR.py")
GP_param_tuning(lower)
source_python("GP_Goddard_forR.py")
objFun <- SPOT::funSphere
GP_param_tuning(lower)
source_python("GP_Goddard_forR.py")
GP_param_tuning(lower)
source_python("GP_Goddard_forR.py")
GP_param_tuning(lower)
source_python("GP_Goddard_forR.py")
GP_param_tuning(lower)
a= GP_param_tuning(lower)
lower = c(10, 10, 1, 1.5, 0.4, 0.2, 0.2, 2, 1.1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1)
a= GP_param_tuning(lower)
source_python("GP_Goddard_forR.py")
a= GP_param_tuning(lower)
source_python("GP_Goddard_forR.py")
lower = c(10, 10, 1, 1.5, 0.4, 0.2, 0.2, 2, 1.1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0)
a= GP_param_tuning(lower)
lower = c(10, 10, 1, 1.5, 0.4, 0.2, 0.2, 2, 1.1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0)
a= GP_param_tuning(lower)
a= GP_param_tuning(lower)
GP_param_tuning(lower)
GP_param_tuning(lower)
lower = c(10, 10, 1, 1.5, 0.4, 0.2, 0.2, 2, 1.1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GP_param_tuning(lower)
GP_param_tuning(lower)
source_python("GP_Goddard_forR.py")
GP_param_tuning(lower)
source_python("GP_Goddard_forR.py")
GP_param_tuning(lower)
lower = c(10, 10, 1, 1.5, 0.4, 0.2, 0.2, 2, 1.1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
GP_param_tuning(lower)
GP_param_tuning()
?source_python
source_python("GP_Goddard_forR.py")
GP_param_tuning(lower)
lower = c(10, 10, 1, 1.5, 0.1, 0.2, 2, 1.1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
objFun <- function(x){
interm<-function(x){
if(sum(x[9:19])<3)
return(1e10)
if(x[1]<=x[7])
x[7]=x[1]
x = c(x[1:4] , 1-x[4]-0.05,x[5:25])
GP_param_tuning(x)
}
as.matrix( apply(x, 1, interm))
}
objFun(matrix(lower),1)
objFun(matrix(lower,1))
objFun <- function(x){
interm<-function(x){
browser()
if(sum(x[9:19])<3)
return(1e10)
if(x[1]<=x[7])
x[7]=x[1]
x = c(x[1:4] , 1-x[4]-0.05,x[5:25])
GP_param_tuning(x)
}
as.matrix( apply(x, 1, interm))
}
objFun(matrix(lower,1))
x
sum(x[9:19])<3
x[9:19]
lower = c(10,  10,  1,   1.5, 0.1,  0.2, 2,   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
objFun <- function(x){
interm<-function(x){
browser()
if(sum(x[9:19])<3)
return(1e10)
if(x[1]<=x[7])
x[7]=x[1]
x = c(x[1:4] , 1-x[4]-0.05,x[5:25])
GP_param_tuning(x)
}
as.matrix( apply(x, 1, interm))
}
objFun(matrix(lower,1))
sum(x[9:19])<3
des = designLHD(,lower,upper, control = list(size= 5,types=types) )
View(des)
res = objFun(des)
objFun <- function(x){
interm<-function(x){
if(sum(x[9:19])<3)
return(1e10)
if(x[1]<=x[7])
x[7]=x[1]
x = c(x[1:4] , 1-x[4]-0.05,x[5:25])
GP_param_tuning(x)
}
as.matrix( apply(x, 1, interm))
}
res = objFun(des)
source_python("GP_Goddard_forR.py")
source_python("GP_Goddard_forR.py")
source_python("GP_Goddard_forR.py")
objFun <- function(x){
interm<-function(x){
if(sum(x[9:19])<3)
return(1e10)
if(x[1]<=x[7])
x[7]=x[1]
x = c(x[1:4] , 1-x[4]-0.05,x[5:25])
GP_param_tuning(x)
}
as.matrix( apply(x, 1, interm))
}
objFun(matrix(lower,1))
des = designLHD(,lower,upper, control = list(size= 5,types=types) )
res = objFun(des)
res = objFun(des)
upper = c(20, 20, 1.5, 2,   0.94, 0.8, 100 ,2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
lower = c(10,  10,  1,   1.5, 0.1,  0.2, 2,   1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
source_python("GP_Goddard_forR.py")
objFun <- function(x){
interm<-function(x){
if(sum(x[9:19])<3)
return(1e10)
if(x[1]<=x[7])
x[7]=x[1]
x = c(x[1:4] , 1-x[4]-0.05,x[5:25])
GP_param_tuning(x)
}
as.matrix( apply(x, 1, interm))
}
objFun(matrix(lower,1))
#   objFun <- SPOT::funSphere
types= c(rep("numeric",8),"integer",rep("factor",(length(upper)-10)))
des = designLHD(,lower,upper, control = list(size= 5,types=types) )
#   objFun <- SPOT::funSphere
types= c(rep("numeric",8),"integer",rep("factor",(length(upper)-10)))
length(upper)
types
length(upper)-10
#   objFun <- SPOT::funSphere
types= c(rep("numeric",8),"integer",rep("factor",(length(upper)-10)))
#   objFun <- SPOT::funSphere
types= c(rep("numeric",8),"integer",rep("factor",(length(upper)-9)))
des = designLHD(,lower,upper, control = list(size= 5,types=types) )
res = objFun(des)
res
des
source_python("GP_Goddard_forR.py")
objFun <- function(x){
interm<-function(x){
if(sum(x[9:19])<3)
return(1e10)
if(x[1]<=x[7])
x[7]=x[1]
x = c(x[1:4] , 1-x[4]-0.05,x[5:25])
GP_param_tuning(x)
}
as.matrix( apply(x, 1, interm))
}
des = designLHD(,lower,upper, control = list(size= 5,types=types) )
res = objFun(des)
des = designLHD(,lower,upper, control = list(size= 100,types=types) )
res = objFun(des)
des = designLHD(,lower,upper, control = list(size= 30,types=types) )
res = objFun(des)
res = objFun(des)
des = designLHD(,lower,upper, control = list(size= 30,types=types) )
res = objFun(des)
source_python("GP_Goddard_forR.py")
objFun <- function(x){
interm<-function(x){
if(sum(x[9:19])<3)
return(1e10)
if(x[1]<=x[7])
x[7]=x[1]
x = c(x[1:4] , 1-x[4]-0.05,x[5:25])
GP_param_tuning(x)
}
as.matrix( apply(x, 1, interm))
}
objFun(matrix(lower,1))
des = designLHD(,lower,upper, control = list(size= 30,types=types) )
res = objFun(des)
