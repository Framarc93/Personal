clc
clearvars
close all
profile off

global dataS
dataS=[];

obj = Spaceplane;
prob = Problem;
file = Files;

%definiton of initial conditions%

% set vector of initial conditions of states and controls
X = zeros(1,prob.varStates);
U = zeros(1,prob.varControls);

%v_init = linear_fun(tnew, v_toNew(1.0), v_toNew(obj.Vtarget));

% v_init = interp1([tnew(1), tnew(end)],[1.0, obj.Vtarget], tnew);
% chi_init = interp1([tnew(1), tnew(end)], [obj.chistart, obj.chi_fin], tnew);
% gamma_init = interp1([tnew(1), tnew(end)], [obj.gammastart, 0.0], tnew);
% teta_init = ones(1, prob.Nbar) * obj.longstart;
% lam_init = ones(1, prob.Nbar) * obj.latstart;
% h_init = interp1([tnew(1), tnew(end)], [1.0, obj.Hini], tnew);
% m_init = interp1([tnew(1), tnew(end)], [obj.M0, obj.m10], tnew);
% alfa_init = zeros(1, prob.varC);
% delta_init = interp1([tcontr(1), tcontr(end)], [1.0, 0.001], tcontr);
% deltaf_init = zeros(1, prob.varC);
% tau_init = zeros(1, prob.varC);
% mu_init = zeros(1, prob.varC);
[v_init, chi_init, gamma_init, teta_init, lam_init, h_init, m_init, alfa_init, delta_init, deltaf_init, tau_init, mu_init, time_fin] = smooth_init(prob.Nleg, prob.NContPoints);
tnew = linspace(0, time_fin, prob.Nbar);  % time vector used for interpolation of states initial guess
tcontr = linspace(0, time_fin, prob.varC);  % time vector used for interpolation of controls intial guess
v_init(1) = 1.0;
chi_init(1) = obj.chistart;
gamma_init(1) = obj.gammastart;
teta_init(1) = obj.longstart;
lam_init(1) = obj.latstart;
h_init(1) = 1.0;
m_init(1) = obj.M0;
alfa_init(1) = 0.0;
delta_init(1) = 1.0;
deltaf_init(1) = 0.0;
tau_init(1) = 0.0;
mu_init(1) = 0.0;
states_init = [v_init(1), chi_init(1), gamma_init(1), teta_init(1), lam_init(1), h_init(1), m_init(1)];
cont_init = [alfa_init(1), delta_init(1), deltaf_init(1), tau_init(1), mu_init(1)];

XGuess = [v_init; chi_init; gamma_init; teta_init; lam_init; h_init; m_init];  % states initial guesses

UGuess = [alfa_init; delta_init; deltaf_init; tau_init; mu_init];  % states initial guesses

k = 1;
for i = 1:prob.Nleg
  
    %creation of vector of states initial guesses%
    for j = 1:prob.Nstates
        X(k) = XGuess(j, i);
        k = k + 1;
    end
    
end

k = 1;
for i = 1:prob.varC
    %creation of vector of controls initial guesses%
   
    for j = 1:prob.Ncontrols
        U(k) = UGuess(j, i);
        k = k + 1;
    end
end         

dt = zeros(1,prob.Nleg);

for i = 1:prob.Nleg
    %creation of vector of time intervals%
    dt(i) = tnew(i + 1) - tnew(i);
end
uplimx = repmat([1e4, deg2rad(180), deg2rad(89.9), 0.0, deg2rad(25), 2e5, obj.M0], 1, prob.Nleg);
inflimx = repmat([1.0, deg2rad(90), deg2rad(-89.9), deg2rad(-70), deg2rad(2), 1.0, obj.m10], 1, prob.Nleg);
uplimu = repmat([deg2rad(40), 1.0, deg2rad(30), 1.0, deg2rad(90)], 1, prob.Nleg * prob.NContPoints);
inflimu = repmat([deg2rad(-2), 0.0001, deg2rad(-20), -1.0, deg2rad(-90)], 1, prob.Nleg * prob.NContPoints);
sx = size(X);
su = size(U);
lbs = zeros(1, sx(2));
ubs = zeros(1, sx(2));
lbc = zeros(1, su(2));
ubc = zeros(1, su(2));
for i=1:sx(2)
    if X(i) < inflimx(i)
        X(i) = inflimx(i);
    end
    if X(i) > uplimx(i)
        X(i) = uplimx(i);
    end
end
for j=1:su(2)
    if U(j) < inflimu(j)
        U(j) = inflimu(j);
    end
    if U(j) > uplimu(j)
        U(j) = uplimu(j);
    end
end
X0d = [X, U, dt];  % vector of initial conditions here all the angles are in degrees!!!!!


[LbS, LbC, UbS, UbC] = bound_def(X, U, uplimx, inflimx, uplimu, inflimu);
% Lbs = zeros(1, size(X));   % possible method to automatically set bounds 
% Ubs = zeros(1, size(X));   % for states and controls according to a
% for i=1:size(X)            % defined initial guess, which should be 
%     Lbs(i) = X0d(i)/2;       % different than a vector of all zeros
%     Ubs(i) = X0d(i)*3/2;
% end
% LbC = [deg2rad(-0.5), 0.8, deg2rad(-0.5), -0.1, deg2rad(-0.1), ...
%         deg2rad(-1.0), 0.8, deg2rad(-1.0), -0.4, deg2rad(-45), ...
%         deg2rad(-2.0), 0.7, deg2rad(-5.0), -0.5, deg2rad(-90), ...
%         repmat([deg2rad(-2.0), 0.4, deg2rad(-20.0), -0.5, deg2rad(-90)], 1, prob.NcontPoints - 3),...
%         repmat([deg2rad(-2.0), 0.1, deg2rad(-20.0), -0.5, deg2rad(-90)], 1, prob.NcontPoints*Nleg-2), ...
%         repmat([deg2rad(-2.0), 0.001, deg2rad(-20.0), -1.0, deg2rad(-60)], 1, prob.NcontPoints), ...
%         repmat([deg2rad(-2.0), 0.001, deg2rad(-10.0), -1.0, deg2rad(-60)], 1, prob.NcontPoints-3),...
%         deg2rad(-2.0), 0.001, deg2rad(-20.0), -1.0, deg2rad(-5.0), ...
%         deg2rad(-2.0), 0.001, deg2rad(-20.0), -1.0, deg2rad(-1), ...
%         deg2rad(-2.0), 0.001, deg2rad(-20.0), -0.5, deg2rad(-0.1)];
        
       
%UbC = zeros(1, size(U));

% LbS = [0.5, deg2rad(110), deg2rad(80), deg2rad(-53), deg2rad(4.8), 0.5, obj.M0-10, ... 
%        1000, deg2rad(100), deg2rad(40), deg2rad(-60), deg2rad(2.0), 2e4, 2e5, ...
%        2000, deg2rad(100), deg2rad(-89.99), deg2rad(-60), deg2rad(2.0), 3e4, 2e5, ...
%        4000, deg2rad(100), deg2rad(-89.99), deg2rad(-60), deg2rad(2.0), 5e4, 1e5];
% UbS = [5.0, deg2rad(120), deg2rad(89.99), deg2rad(-51), deg2rad(5.8), 10.0, obj.M0, ... 
%        5000, deg2rad(200), deg2rad(89.99), deg2rad(-45), deg2rad(8.0), 5e4, 4e5, ...
%        7000, deg2rad(200), deg2rad(89.99), deg2rad(-45), deg2rad(8.0), 6e4, 4e5, ...
%        1e4, deg2rad(200), deg2rad(89.99), deg2rad(-45), deg2rad(15.0), 1e5, 2e5];
% LbC = [deg2rad(-0.5), 0.9, deg2rad(-0.5), -0.1, deg2rad(-0.1), ...
%         deg2rad(-1.0), 0.9, deg2rad(-1.0), -0.5, deg2rad(-45), ...
%         deg2rad(-2.0), 0.9, deg2rad(-5.0), -0.5, deg2rad(-90), ...
%         deg2rad(-2.0), 0.8, deg2rad(-10.0), -0.5, deg2rad(-90), ...
%         deg2rad(-2.0), 0.4, deg2rad(-20.0), -0.5, deg2rad(-90), ...
%         deg2rad(-2.0), 0.4, deg2rad(-20.0), -0.5, deg2rad(-90), ...
%         deg2rad(-2.0), 0.4, deg2rad(-20.0), -0.5, deg2rad(-90), ...
%         deg2rad(-2.0), 0.3, deg2rad(-20.0), -0.5, deg2rad(-90), ...
%         deg2rad(-2.0), 0.3, deg2rad(-20.0), -0.5, deg2rad(-90), ...
%         deg2rad(-2.0), 0.3, deg2rad(-20.0), -1.0, deg2rad(-90), ...
%         deg2rad(-2.0), 0.3, deg2rad(-20.0), -1.0, deg2rad(-90), ...
%         deg2rad(-2.0), 0.25, deg2rad(-20.0), -1.0, deg2rad(-90), ...
%         deg2rad(-2.0), 0.25, deg2rad(-20.0), -1.0, deg2rad(-90), ...
%         deg2rad(-2.0), 0.25, deg2rad(-20.0), -1.0, deg2rad(-90), ...
%         deg2rad(-2.0), 0.2, deg2rad(-20.0), -1.0, deg2rad(-90), ...
%         deg2rad(-2.0), 0.1, deg2rad(-20.0), -1.0, deg2rad(-90), ...
%         deg2rad(-2.0), 0.1, deg2rad(-20.0), -1.0, deg2rad(-90), ...
%         deg2rad(-2.0), 0.1, deg2rad(-20.0), -1.0, deg2rad(-90), ...
%         deg2rad(-2.0), 0.001, deg2rad(-20.0), -1.0, deg2rad(-60), ...
%         deg2rad(-2.0), 0.001, deg2rad(-20.0), -1.0, deg2rad(-60), ...
%         deg2rad(-2.0), 0.001, deg2rad(-20.0), -1.0, deg2rad(-60), ...
%         deg2rad(-2.0), 0.001, deg2rad(-20.0), -1.0, deg2rad(-60), ...
%         deg2rad(-2.0), 0.001, deg2rad(-20.0), -1.0, deg2rad(-60), ...
%         deg2rad(-2.0), 0.001, deg2rad(-20.0), -1.0, deg2rad(-30), ...
%         deg2rad(-2.0), 0.001, deg2rad(-20.0), -1.0, deg2rad(-30), ...
%         deg2rad(-2.0), 0.001, deg2rad(-20.0), -1.0, deg2rad(-5.0), ...
%         deg2rad(-2.0), 0.001, deg2rad(-20.0), -1.0, deg2rad(-1), ...
%         deg2rad(-2.0), 0.001, deg2rad(-20.0), -0.5, deg2rad(-0.1)];
% UbC = [deg2rad(0.5), 1.0, deg2rad(0.5), 0.1, deg2rad(0.1), ...
%         deg2rad(1.0), 1.0, deg2rad(1.0), 0.5, deg2rad(45), ...
%         deg2rad(5.0), 1.0, deg2rad(5.0), 0.5, deg2rad(90), ...
%         deg2rad(10.0), 1.0, deg2rad(10.0), 0.5, deg2rad(90), ...
%         deg2rad(40.0), 1.0, deg2rad(30.0), 0.5, deg2rad(90), ...
%         deg2rad(40.0), 1.0, deg2rad(30.0), 0.5, deg2rad(90), ...
%         deg2rad(40.0), 1.0, deg2rad(30.0), 0.5, deg2rad(90), ...
%         deg2rad(40.0), 1.0, deg2rad(30.0), 0.5, deg2rad(90), ...
%         deg2rad(40.0), 1.0, deg2rad(30.0), 0.5, deg2rad(90), ...
%         deg2rad(40.0), 1.0, deg2rad(30.0), 0.5, deg2rad(90), ...
%         deg2rad(40.0), 1.0, deg2rad(30.0), 1.0, deg2rad(90), ...
%         deg2rad(40.0), 1.0, deg2rad(30.0), 1.0, deg2rad(90), ...
%         deg2rad(40.0), 1.0, deg2rad(30.0), 1.0, deg2rad(90), ...
%         deg2rad(40.0), 1.0, deg2rad(30.0), 1.0, deg2rad(90), ...
%         deg2rad(40.0), 1.0, deg2rad(30.0), 1.0, deg2rad(90), ...
%         deg2rad(40.0), 1.0, deg2rad(30.0), 1.0, deg2rad(90), ...
%         deg2rad(40.0), 1.0, deg2rad(30.0), 1.0, deg2rad(90), ...
%         deg2rad(40.0), 1.0, deg2rad(30.0), 1.0, deg2rad(90), ...
%         deg2rad(40.0), 1.0, deg2rad(30.0), 1.0, deg2rad(90), ...
%         deg2rad(40.0), 1.0, deg2rad(30.0), 1.0, deg2rad(90), ...
%         deg2rad(40.0), 1.0, deg2rad(30.0), 1.0, deg2rad(90), ...
%         deg2rad(5.0), 1.0, deg2rad(30.0), 1.0, deg2rad(90), ...
%         deg2rad(5.0), 1.0, deg2rad(30.0), 1.0, deg2rad(90), ...
%         deg2rad(5.0), 1.0, deg2rad(30.0), 1.0, deg2rad(60.0), ...
%         deg2rad(5.0), 1.0, deg2rad(30.0), 1.0, deg2rad(30.0), ...
%         deg2rad(5.0), 1.0, deg2rad(30.0), 1.0, deg2rad(5.0), ...
%         deg2rad(5.0), 1.0, deg2rad(30.0), 1.0, deg2rad(1.0), ...
%         deg2rad(5.0), 1.0, deg2rad(30.0), 0.5, deg2rad(0.1)];
Tlb = [0.1]; % time lower bounds
Tub = [300]; % time upper bounds
prob.LBV = [LbS, LbC, repmat(Tlb, 1, prob.Nleg)];
prob.UBV = [UbS, UbC, repmat(Tub, 1, prob.Nleg)];

X0a = (X0d - prob.LBV)./(prob.UBV-prob.LBV);

lb = [0.0];
ub = [1.0];

LB = [repmat(lb, 1, prob.Nleg*prob.Nstates), repmat(lb, 1, prob.Nleg * prob.NContPoints  * prob.Ncontrols), repmat(lb, 1, prob.Nleg)];
UB = [repmat(ub, 1, prob.Nleg*prob.Nstates), repmat(ub, 1, prob.Nleg * prob.NContPoints * prob.Ncontrols), repmat(ub, 1, prob.Nleg)];
global varOld costOld eqOld ineqOld States Controls globTime
varOld = zeros(size(X0a));
costOld = 0;
eqOld = zeros(0);
ineqOld = zeros(0);
States = zeros(0);
Controls = zeros(0);
globTime = zeros(0);
% load('var_1.mat');
% for i=1:size(var_1,2)
%     y0(1,i)=0.001*(rand(1,1)*2.-1.)+var_1(1,i);
% end
% y0=max([y0;zeros(size(y0))]);
% y0=min([y0;ones(size(y0))]);
% X0=y0;
[opt, fval] = opti(obj, prob, file, X0a, LB, UB);
Plot_MS(opt, prob, obj, file);
save sol_N100_2